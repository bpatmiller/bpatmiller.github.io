{"version":3,"sources":["components/ContentGrid.tsx","components/Logo.tsx","components/Layout.tsx","Home.tsx","Fractalize.tsx","App.tsx","theme.ts","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["AnimatedText","animated","Text","AnimatedImage","Image","ContentGrid","props","children","contents","map","x","title","link","img","margin","wrap","justify","maxWidth","p","ContentGridItem","useState","isHovered","setIsHovered","imgProps","useSpring","transform","textProps","opacity","padding","boxSize","onMouseEnter","onMouseLeave","m","mb","href","concat","src","objectFit","paddingLeft","paddingRight","paddingBottom","paddingTop","marginBottom","style","align","fontSize","Logo","deg","setDeg","String","Math","sin","height","config","friction","svg","viewBox","xmlns","PI","fill","stroke","id","d","offset","stop-color","Layout","width","flexDirection","w","size","grow","overflow","entries","Home","Fractalize","theme","extendTheme","colors","pink","red","teal","cyan","purple","green","orange","initialColorMode","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.56fc0e4f.chunk.js","sourcesContent":["import { Flex, Image, Box, Text, Link } from \"@chakra-ui/react\";\nimport { useSpring, animated } from \"react-spring\";\nimport React, { useState } from \"react\";\n\nconst AnimatedText = animated(Text);\nconst AnimatedImage = animated(Image);\n\ninterface ContentGridProps {\n  contents: ContentGridItemProps[];\n}\n\ninterface ContentGridItemProps {\n  title: string;\n  link: string;\n  img: string;\n}\n\nconst ContentGrid = (props: ContentGridProps) => {\n  const children = props.contents.map((x) => (\n    <ContentGridItem title={x.title} link={x.link} img={x.img} />\n  ));\n  return (\n    <Flex\n      margin=\"auto\"\n      wrap=\"wrap\"\n      // flexDirection={[\"column\", \"column\", \"column\", \"row\", \"row\"]}\n      justify=\"space-around\"\n      maxWidth=\"1200px\"\n      p={8}\n    >\n      {children}\n    </Flex>\n  );\n};\n\nconst ContentGridItem = (props: ContentGridItemProps) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const imgProps = useSpring({\n    transform: isHovered ? \"translate(-20px,-20px)\" : \"translate(0px,0px)\",\n  });\n\n  const textProps = useSpring({\n    transform: isHovered ? \"translate(-20px,-20px)\" : \"translate(0px,0px)\",\n    opacity: isHovered ? \"100%\" : \"30%\",\n    margin: 0,\n    padding: 0,\n  });\n\n  return (\n    <Box\n      boxSize={[\"xs\", \"sm\", \"sm\", \"sm\", \"md\"]}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      m={0}\n      mb={[10, 10, 10, 2, 2]}\n      p={0} //{[0, 8, 8, 0, 0]}\n    >\n      <Link href={\"/#\".concat(props.link)}>\n        <AnimatedImage\n          src={props.img}\n          objectFit=\"fill\"\n          margin=\"auto\"\n          paddingLeft={[4, 4, 4, 8, 8]}\n          paddingRight={[4, 4, 4, 8, 8]}\n          paddingBottom={0}\n          paddingTop={0}\n          marginBottom={0}\n          style={imgProps}\n        ></AnimatedImage>\n        <Flex\n          paddingTop={0}\n          paddingBottom={0}\n          paddingLeft={[4, 4, 4, 8, 8]}\n          justify=\"flex-start\"\n          align=\"flex-start\"\n        >\n          <Box>\n            <AnimatedText fontSize=\"4xl\" style={textProps}>\n              {props.title}\n            </AnimatedText>\n          </Box>\n        </Flex>\n      </Link>\n    </Box>\n  );\n};\n\nexport { ContentGrid, ContentGridItem };\n","import React, { useState } from \"react\";\nimport { Link } from \"@chakra-ui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\n\nconst Logo = () => {\n  const [deg, setDeg] = useState(-180);\n\n  const style = useSpring({\n    transform: \"scale(\"\n      .concat(String(80 + (1.0 + Math.sin(deg)) * 25))\n      .concat(\"%)\"),\n    height: \"96px\",\n    margin: \"auto\",\n    config: {\n      friction: 3,\n    },\n  });\n\n  return (\n    <Link href=\"/\">\n      <animated.svg\n        style={style}\n        viewBox=\"0 0 500 500\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        onMouseEnter={() => {\n          setDeg(deg + 1.0 * Math.PI);\n        }}\n        fill=\"#logoGradient\"\n      >\n        <defs>\n          <path\n            fill=\"white\"\n            stroke=\"white\"\n            id=\"textCurve\"\n            d=\"M243.2, 382.4c-74.8,   \n          0-135.5-60.7-135.5-135.5s60.7-135.5,135.5-135.5s135.5, 60.7, 135.5,\n          135.5 S318, 382.4, 243.2, 382.4z\"\n          />\n          <linearGradient id=\"logoGradient\">\n            <stop offset=\"5%\" stop-color=\"violet\" />\n            <stop offset=\"95%\" stop-color=\"#FF5566\" />\n          </linearGradient>\n        </defs>\n\n        <text fontSize=\"104px\">\n          <textPath fill=\"white\" href=\"#textCurve\">\n            Brendan P Miller ***\n          </textPath>\n        </text>\n      </animated.svg>\n    </Link>\n  );\n};\n\nexport { Logo };\n","import { Box, Flex, Link } from \"@chakra-ui/layout\";\nimport React from \"react\";\nimport { GrGithub } from \"react-icons/gr\";\nimport { JsxElement } from \"typescript\";\nimport { Logo } from \"./Logo\";\n\nexport const Layout = ({ children }: JsxElement) => {\n  return (\n    <Flex\n      width=\"100%\"\n      height=\"100vh\"\n      flexDirection={[\"column\", \"column\", \"column\", \"row\", \"row\"]}\n    >\n      <Flex\n        flexDirection=\"row\"\n        justify=\"center\"\n        align=\"flex-start\"\n        height=\"100%\"\n        w={[\"100%\", \"100%\", \"100%\", \"156px\", \"256px\"]}\n      >\n        <Flex\n          p={0}\n          flexDirection={[\"row\", \"row\", \"row\", \"column\", \"column\"]}\n          align=\"center\"\n        >\n          <Box p={4}>\n            <Logo />\n          </Box>\n          <Box p={4}>\n            <Link href=\"https://github.com/bpatmiller\">\n              <GrGithub size=\"2em\" />\n            </Link>\n          </Box>\n        </Flex>\n      </Flex>\n\n      {/* <Flex align=\"center\" justify=\"center\">\n      <Box\n        height={[\"0px\", \"0px\", \"0px\", \"33%\", \"33%\"]}\n        width={[\"33%\", \"33%\", \"33%\", \"0px\", \"0%\"]}\n        borderLeft=\"2px solid rgba(255,255,255,0.3)\"\n        borderTop=\"2px solid rgba(255,255,255,0.3)\"\n      ></Box>\n    </Flex> */}\n\n      <Flex p={0} height=\"100%\" grow={9} overflow=\"hide\">\n        {children}\n      </Flex>\n    </Flex>\n  );\n};\n","import * as React from \"react\";\n\nimport { ContentGrid } from \"./components/ContentGrid\";\nimport { Layout } from \"./components/Layout\";\n\nconst entries = [\n  { title: \"Fractalize.JS\", link: \"fractalize\", img: \"/frac.png\" },\n  { title: \"Audio Reactive GAN\", link: \"argan\", img: \"/gan.jpg\" },\n  { title: \"Chessboard\", link: \"chess\", img: \"/chess.png\" },\n  { title: \"Multiple Interacting Fluids\", link: \"gfm2d\", img: \"/gfm2d.png\" },\n];\n\nexport const Home = () => {\n  return (\n    <Layout>\n      <ContentGrid contents={entries} />\n    </Layout>\n  );\n};\n","import React from \"react\";\nimport { Layout } from \"./components/Layout\";\n\nexport const Fractalize = () => {\n  return <Layout>hi</Layout>;\n};\n","import * as React from \"react\";\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport myTheme from \"./theme\";\nimport { Home } from \"./Home\";\nimport { Fractalize } from \"./Fractalize\";\n\nconst theme = extendTheme({ ...myTheme, initialColorMode: \"light\" });\n\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <Router basename={\"/page/\"}>\n      <Route exact path=\"/\" component={Home}></Route>\n      <Route exact path=\"/fractalize\" component={Fractalize}></Route>\n    </Router>\n  </ChakraProvider>\n);\n","export default {\n  colors: {\n    pink: {\n      \"50\": \"#F7EEEF\",\n      \"100\": \"#E8CED2\",\n      \"200\": \"#DAAFB6\",\n      \"300\": \"#CB8F99\",\n      \"400\": \"#BD707C\",\n      \"500\": \"#AE5160\",\n      \"600\": \"#8C404D\",\n      \"700\": \"#693039\",\n      \"800\": \"#462026\",\n      \"900\": \"#231013\",\n    },\n    red: {\n      \"50\": \"#FAECEA\",\n      \"100\": \"#F1CAC5\",\n      \"200\": \"#E8A9A0\",\n      \"300\": \"#E0877B\",\n      \"400\": \"#D76556\",\n      \"500\": \"#CE4331\",\n      \"600\": \"#A53627\",\n      \"700\": \"#7C281D\",\n      \"800\": \"#521B14\",\n      \"900\": \"#290D0A\",\n    },\n    teal: {\n      \"50\": \"#ECF9F7\",\n      \"100\": \"#C9EEE9\",\n      \"200\": \"#A6E2DA\",\n      \"300\": \"#84D7CC\",\n      \"400\": \"#61CCBD\",\n      \"500\": \"#3EC1AF\",\n      \"600\": \"#329A8C\",\n      \"700\": \"#257469\",\n      \"800\": \"#194D46\",\n      \"900\": \"#0C2723\",\n    },\n    cyan: {\n      \"50\": \"#E8F4FC\",\n      \"100\": \"#BFE1F7\",\n      \"200\": \"#97CEF2\",\n      \"300\": \"#6EBBED\",\n      \"400\": \"#45A8E8\",\n      \"500\": \"#1C94E3\",\n      \"600\": \"#1677B6\",\n      \"700\": \"#115988\",\n      \"800\": \"#0B3B5B\",\n      \"900\": \"#061E2D\",\n    },\n    purple: {\n      \"50\": \"#F0EDF7\",\n      \"100\": \"#D6CDE9\",\n      \"200\": \"#BCADDC\",\n      \"300\": \"#A28DCE\",\n      \"400\": \"#876DC0\",\n      \"500\": \"#6D4DB2\",\n      \"600\": \"#573E8E\",\n      \"700\": \"#412E6B\",\n      \"800\": \"#2C1F47\",\n      \"900\": \"#160F24\",\n    },\n    green: {\n      \"50\": \"#EDF8EF\",\n      \"100\": \"#CCEBD3\",\n      \"200\": \"#ABDEB7\",\n      \"300\": \"#8AD19B\",\n      \"400\": \"#69C47F\",\n      \"500\": \"#48B763\",\n      \"600\": \"#3A9250\",\n      \"700\": \"#2B6E3C\",\n      \"800\": \"#1D4928\",\n      \"900\": \"#0E2514\",\n    },\n    orange: {\n      \"50\": \"#FCF0E9\",\n      \"100\": \"#F6D4C1\",\n      \"200\": \"#F0B999\",\n      \"300\": \"#EA9E70\",\n      \"400\": \"#E58248\",\n      \"500\": \"#DF6720\",\n      \"600\": \"#B2521A\",\n      \"700\": \"#863E13\",\n      \"800\": \"#59290D\",\n      \"900\": \"#2D1506\",\n    },\n  },\n};\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}