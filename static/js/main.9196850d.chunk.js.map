{"version":3,"sources":["components/Logo.tsx","components/ContentGrid.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["Logo","useState","deg","setDeg","style","useSpring","transform","concat","String","Math","sin","height","margin","config","friction","href","svg","viewBox","xmlns","onMouseEnter","PI","fill","stroke","id","d","offset","stop-color","fontSize","AnimatedText","animated","Text","AnimatedImage","Image","ContentGrid","props","children","contents","map","x","title","link","img","wrap","justify","maxWidth","p","ContentGridItem","isHovered","setIsHovered","imgProps","textProps","opacity","padding","boxSize","onMouseLeave","m","paddingTop","src","objectFit","paddingLeft","paddingRight","paddingBottom","marginBottom","align","entries","App","theme","width","flexDirection","w","size","grow","overflow","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9196850d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Box, BoxProps, Link, Text } from \"@chakra-ui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\n\nconst Logo = () => {\n  const [isHovered, setIsHovered] = useState(false);\n  const [deg, setDeg] = useState(-180);\n\n  const style = useSpring({\n    transform: \"scale(\"\n      .concat(String(80 + (1.0 + Math.sin(deg)) * 25))\n      .concat(\"%)\"),\n    height: \"96px\",\n    margin: \"auto\",\n    config: {\n      friction: 3,\n    },\n  });\n\n  return (\n    <Link href=\"/\">\n      <animated.svg\n        style={style}\n        viewBox=\"0 0 500 500\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        onMouseEnter={() => {\n          setDeg(deg + 1.0 * Math.PI);\n        }}\n        fill=\"#logoGradient\"\n      >\n        <defs>\n          <path\n            fill=\"white\"\n            stroke=\"white\"\n            id=\"textCurve\"\n            d=\"M243.2, 382.4c-74.8,   \n          0-135.5-60.7-135.5-135.5s60.7-135.5,135.5-135.5s135.5, 60.7, 135.5,\n          135.5 S318, 382.4, 243.2, 382.4z\"\n          />\n          <linearGradient id=\"logoGradient\">\n            <stop offset=\"5%\" stop-color=\"violet\" />\n            <stop offset=\"95%\" stop-color=\"#FF5566\" />\n          </linearGradient>\n        </defs>\n\n        <text fontSize=\"104px\">\n          <textPath fill=\"white\" href=\"#textCurve\">\n            Brendan P Miller ***\n          </textPath>\n        </text>\n      </animated.svg>\n    </Link>\n  );\n};\n\nexport { Logo };\n","import {\n  Flex,\n  Spacer,\n  Image,\n  Box,\n  Text,\n  Container,\n  Link,\n} from \"@chakra-ui/react\";\nimport { ChildType } from \"./util\";\nimport { useSpring, animated } from \"react-spring\";\nimport React, { useState } from \"react\";\n\nconst AnimatedText = animated(Text);\nconst AnimatedImage = animated(Image);\n\ninterface ContentGridProps {\n  contents: ContentGridItemProps[];\n}\n\ninterface ContentGridItemProps {\n  title: string;\n  link: string;\n  img: string;\n}\n\nconst ContentGrid = (props: ContentGridProps) => {\n  const children = props.contents.map((x) => (\n    <ContentGridItem title={x.title} link={x.link} img={x.img} />\n  ));\n  return (\n    <Flex\n      margin=\"auto\"\n      wrap=\"wrap\"\n      justify=\"space-around\"\n      maxWidth=\"1200px\"\n      p={8}\n    >\n      {children}\n    </Flex>\n  );\n};\n\nconst ContentGridItem = (props: ContentGridItemProps) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const imgProps = useSpring({\n    transform: isHovered ? \"translate(-20px,-20px)\" : \"translate(0px,0px)\",\n  });\n\n  const textProps = useSpring({\n    transform: isHovered ? \"translate(-20px,-20px)\" : \"translate(0px,0px)\",\n    opacity: isHovered ? \"100%\" : \"30%\",\n    margin: 0,\n    padding: 0,\n  });\n\n  return (\n    <Box\n      boxSize={[\"xs\", \"sm\", \"sm\", \"sm\", \"md\"]}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      p={0}\n      m={0}\n      paddingTop={[8, 8, 8, 0, 0]}\n      // border=\"1px s/olid red\"\n    >\n      <Link href={props.link}>\n        <AnimatedImage\n          src={props.img}\n          objectFit=\"fill\"\n          margin=\"auto\"\n          paddingLeft={[4, 4, 8, 8]}\n          paddingRight={[4, 4, 8, 8]}\n          paddingBottom={0}\n          marginBottom={0}\n          style={imgProps}\n        ></AnimatedImage>\n        <Flex\n          paddingTop={0}\n          paddingBottom={0}\n          paddingLeft={[4, 4, 8, 8]}\n          justify=\"flex-start\"\n          align=\"flex-start\"\n        >\n          <Box>\n            <AnimatedText fontSize=\"4xl\" style={textProps}>\n              {props.title}\n            </AnimatedText>\n          </Box>\n        </Flex>\n      </Link>\n    </Box>\n  );\n};\n\nexport { ContentGrid, ContentGridItem };\n","import * as React from \"react\";\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Code,\n  Grid,\n  theme,\n  Flex,\n} from \"@chakra-ui/react\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport { Logo } from \"./components/Logo\";\nimport { ContentGrid, ContentGridItem } from \"./components/ContentGrid\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link as RouteLink,\n} from \"react-router-dom\";\nimport { GrGithub } from \"react-icons/gr\";\n\nconst entries = [\n  { title: \"Fractalize.JS\", link: \"fractalize\", img: \"/frac.png\" },\n  { title: \"Audio Reactive GAN\", link: \"argan\", img: \"/gan.jpg\" },\n  { title: \"Chessboard\", link: \"chess\", img: \"/chess.png\" },\n  { title: \"Multiple Interacting Fluids\", link: \"gfm2d\", img: \"/gfm2d.png\" },\n];\n\nexport const App = () => (\n  <ChakraProvider theme={theme}>\n    <Router>\n      <Flex\n        width=\"100%\"\n        height=\"100vh\"\n        flexDirection={[\"column\", \"column\", \"column\", \"row\", \"row\"]}\n      >\n        <Flex\n          flexDirection=\"row\"\n          justify=\"center\"\n          align=\"flex-start\"\n          height=\"100%\"\n          w={[\"100%\", \"100%\", \"100%\", \"156px\", \"256px\"]}\n        >\n          <Flex\n            p={0}\n            flexDirection={[\"row\", \"row\", \"row\", \"column\", \"column\"]}\n            align=\"center\"\n          >\n            <Box p={4}>\n              <Logo />\n            </Box>\n            <Box p={4}>\n              <Link href=\"https://github.com/bpatmiller\">\n                <GrGithub size=\"2em\" />\n              </Link>\n            </Box>\n          </Flex>\n        </Flex>\n        {/* <Flex align=\"center\" justify=\"center\">\n          <Box\n            height={[\"0px\", \"0px\", \"0px\", \"33%\", \"33%\"]}\n            width={[\"33%\", \"33%\", \"33%\", \"0px\", \"0%\"]}\n            borderLeft=\"2px solid rgba(255,255,255,0.3)\"\n            borderTop=\"2px solid rgba(255,255,255,0.3)\"\n          ></Box>\n        </Flex> */}\n\n        <Flex height=\"100%\" grow={9} overflow=\"hide\">\n          <Switch>\n            <Route path=\"/fractalize\">fractalize</Route>\n            <Route path=\"/gfm2d\">gfm2d</Route>\n            <Route path=\"/argan\">argan</Route>\n            <Route path=\"/chess\">chess</Route>\n            <Route path=\"/\">\n              <ContentGrid contents={entries} />\n            </Route>\n          </Switch>\n        </Flex>\n      </Flex>\n    </Router>\n  </ChakraProvider>\n);\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}