{"version":3,"sources":["useRouter.tsx","components/ColorModeButton.tsx","components/Logo.tsx","components/Layout.tsx","components/ContentGrid.tsx","pages/Home.tsx","components/ContentLink.tsx","components/Writeup.tsx","pages/Fractalize.tsx","pages/Argan.tsx","pages/Chess.tsx","pages/Gfm.tsx","pages/Raytracer.tsx","pages/Bulb.tsx","theme.ts","ltbg.svg","dkbg.svg","components/Background.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["useRouter","useContext","__RouterContext","ColorModeButton","toggleColorMode","useColorMode","size","onClick","Logo","location","transitions","useTransition","key","pathname","from","opacity","transform","enter","config","tension","colorMode","style","item","div","className","height","overflow","borderRadius","border","href","viewBox","xmlns","fill","id","d","offset","stopColor","gradientTransform","fontSize","Layout","props","width","flexDirection","p","justify","align","w","flexShrink","paddingTop","paddingBottom","children","AnimatedBox","animated","Box","ContentGrid","contents","map","x","title","link","img","h","margin","wrap","maxWidth","gridRowGap","ContentGridItem","useState","isHovered","setIsHovered","imgProps","useSpring","filter","desktopBoxWidth","mobileBoxWidth","rounded","onMouseEnter","onMouseLeave","concat","fit","src","noOfLines","entries","Home","CodeLink","leftIcon","ContentLink","HBar","textAlign","genColor","tagName","colors","charCodeAt","length","Writeup","direction","gridColumnGap","tags","colorScheme","m","mb","fontStyle","date","short","gridGap","contentLink","variant","codeLink","options","overrides","hr","component","h1","Heading","h2","mt","h3","Text","a","Link","padding","Image","Flex","markdown","frac_props","Fractalize","gan_props","Argan","chess_props","Chess","gfm_props","Gfm","ray_props","Raytracer","bulb_props","Bulb","theme","extendTheme","pink","red","teal","cyan","purple","green","orange","styles","global","body","color","mode","bg","boxShadow","userSelect","Button","Background","backgroundImage","ltbg","dkbg","backgroundColor","backgroundRepeat","backgroundAttachment","backgroundSize","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yMAOeA,EAJG,WAChB,OAAOC,qBAAWC,M,2DCMLC,EANmB,WAAO,IAC/BC,EAAoBC,cAApBD,gBAER,OAAO,cAAC,IAAD,CAAUE,KAAK,MAAMC,QAAS,kBAAMH,Q,QCFvCI,EAAO,WAAO,IACVC,EAAaT,IAAbS,SACFC,EAAcC,wBAAcF,EAAU,CAC1CG,IAAKH,EAASI,SACdC,KAAM,CACJC,QAA+B,MAAtBN,EAASI,UAAoB,EAAI,EAC1CG,UACwB,MAAtBP,EAASI,SAAmB,iBAAmB,kBAEnDI,MAAO,CACLF,QAAS,EACTC,UAAW,kBAEbE,OAAQ,CAAEC,QAAS,OAEbC,EAAcf,cAAde,UAER,OAAOV,GAAY,SAACW,EAAOC,GACzB,OACE,cAAC,WAASC,IAAV,CAAcC,UAAU,YAA2BH,MAAOA,EAA1D,SACE,eAAC,IAAD,CACEI,OAAQ,CAAC,GAAI,GAAI,GAAI,IACrBC,SAAS,SACTC,aAAa,MACbC,OAAO,YAJT,UAME,cAAC,IAAD,CAAaC,KAAK,MAClB,sBACEJ,OAAO,OACPK,QAAQ,cACRC,MAAM,6BACNC,KAAoB,UAAdZ,EAAwB,QAAU,QAJ1C,UAME,iCACE,sBACEa,GAAG,YACHC,EAAE,iIAIJ,iCAAgBD,GAAG,YAAnB,UACE,sBAAME,OAAO,IAAIC,UAAU,YAC3B,sBAAMD,OAAO,IAAIC,UAAU,eAE7B,iCAAgBH,GAAG,YAAYI,kBAAkB,aAAjD,UACE,sBAAMF,OAAO,IAAIC,UAAU,YAC3B,sBAAMD,OAAO,IAAIC,UAAU,kBAK/B,sBAAME,SAAS,QAAf,SACE,0BAAUN,KAAK,UAAUH,KAAK,aAA9B,2CAjCiCP,EAAKV,SCdvC2B,EAAgC,SAACC,GAC5C,OACE,eAAC,IAAD,CACEC,MAAM,OACNhB,OAAO,QACPiB,cAAe,CAAC,SAAU,SAAU,SAAU,MAAO,OACrDC,EAAG,EAJL,UAME,cAAC,IAAD,CACED,cAAc,MACdE,QAAQ,SACRC,MAAM,aACNpB,OAAQ,CAAC,GAAI,GAAI,GAAI,QACrBqB,EAAG,CAAC,OAAQ,OAAQ,OAAQ,IAC5BC,WAAY,EACZvB,UAAU,UACVwB,WAAY,CAAC,EAAG,EAAG,EAAG,GACtBC,cAAe,EATjB,SAWE,eAAC,IAAD,CACEP,cAAe,CAAC,MAAO,MAAO,MAAO,SAAU,UAC/CG,MAAM,SAFR,UAIE,cAAC,IAAD,CAAKF,EAAG,EAAGjB,SAAS,SAApB,SACE,cAAC,EAAD,MAEF,eAAC,IAAD,CAASiB,EAAG,EAAZ,UACE,cAAC,IAAD,CAAad,KAAK,kCAClB,cAAC,IAAD,CAAcvB,KAAK,WAErB,cAAC,IAAD,CAAKqC,EAAG,EAAR,SACE,cAAC,EAAD,WAKN,cAAC,IAAD,CACEA,EAAG,EACHlB,OAAO,OACPC,SAAS,OACTkB,QAAS,CAAC,SAAU,SAAU,SAAU,aAAc,cAJxD,SAMGJ,EAAMU,e,yBChDTC,EAAcC,mBAASC,KAYvBC,EAAc,SAACd,GACnB,IAAMU,EAAWV,EAAMe,SAASC,KAAI,SAACC,GAAD,OAClC,cAAC,EAAD,CAAiBC,MAAOD,EAAEC,MAAOC,KAAMF,EAAEE,KAAMC,IAAKH,EAAEG,SAExD,OACE,cAAC,IAAD,CAAMd,EAAE,OAAOe,EAAE,OAAjB,SACE,cAAC,IAAD,CACEC,OAAO,OACPC,KAAK,OACLnB,QAAQ,eACRC,MAAM,SACNmB,SAAS,SACTrB,EAAG,EACHsB,WAAY,CAAC,GAAI,GAAI,GAAI,GAP3B,SASGf,OAMHgB,EAAkB,SAAC1B,GAAiC,IAAD,EACrB2B,oBAAS,GADY,mBAChDC,EADgD,KACrCC,EADqC,KAEjDC,EAAWC,oBAAU,CACzBvD,UAAWoD,EAAY,yBAA2B,qBAClDI,OAAQJ,EAAY,iBAAmB,kBAGnCK,EAAkB,kCAElBC,EAAiB,gCAEvB,OACE,cAACvB,EAAD,CACE3B,UAAU,WACVH,MAAOiD,EACP5C,SAAS,SACTC,aAAa,KACbmB,EAAG,CACD4B,EACAA,EAXiB,kCAajBD,EACAA,GAVJ,SAaE,cAAC,IAAD,CACEjD,UAAU,oBACVqC,EAAE,OACFf,EAAE,OACF6B,QAAQ,KACRC,aAAc,kBAAMP,GAAa,IACjCQ,aAAc,kBAAMR,GAAa,IANnC,SAQE,eAAC,IAAD,CAAaxC,KAAM,KAAKiD,OAAOtC,EAAMmB,MAArC,UACE,cAAC,IAAD,CAAOoB,IAAI,QAAQjC,EAAE,OAAOkC,IAAKxC,EAAMoB,MAEvC,cAAC,IAAD,CAAMd,EAAE,OAAOH,EAAG,EAAGC,QAAQ,SAASC,MAAM,SAA5C,SACE,cAAC,IAAD,CAAMoC,UAAW,EAAGzD,UAAU,UAAUc,SAAS,MAAjD,SACGE,EAAMkB,kBCvEfwB,EAAU,CACd,CAAExB,MAAO,gBAAiBC,KAAM,aAAcC,IAAK,aACnD,CAAEF,MAAO,qBAAsBC,KAAM,QAASC,IAAK,YACnD,CAAEF,MAAO,aAAcC,KAAM,QAASC,IAAK,cAC3C,CAAEF,MAAO,8BAA+BC,KAAM,QAASC,IAAK,cAC5D,CAAEF,MAAO,YAAaC,KAAM,YAAaC,IAAK,kBAC9C,CAAEF,MAAO,SAAUC,KAAM,OAAQC,IAAK,cAG3BuB,EAAO,WAClB,OAAO,cAAC,EAAD,CAAa5B,SAAU2B,K,oDCJ1BE,EAAW,SAAC5C,GAChB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAaX,KAAMW,EAAMmB,KAAzB,SACE,cAAC,IAAD,yBAAQ0B,SAAU,cAAC,IAAD,KAAwB7C,GAA1C,oCAQF8C,EAAc,SAAC9C,GACnB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAaX,KAAMW,EAAMmB,KAAzB,SACE,cAAC,IAAD,yBAAQ0B,SAAU,cAAC,IAAD,KAAmB7C,GAArC,oCCXF+C,EAAO,WACX,OACE,cAAC,IAAD,CAAKzB,OAAO,OAAO0B,UAAU,SAA7B,6BAMEC,EAAW,SAACC,GAChB,IAAMC,EAAS,CAAC,OAAQ,OAAQ,QAAS,SAAU,MAAO,UAE1D,OAAOA,EADMD,EAAQE,WAAW,GAAKD,EAAOE,SAIxCC,EAAU,SAACtD,GACf,OACE,eAAC,IAAD,CAAMsB,OAAO,OAAOE,SAAU,IAAKrB,EAAG,EAAGoD,UAAU,SAASlD,MAAM,UAAlE,UACE,eAAC,IAAD,CAAMD,QAAQ,gBAAgBC,MAAM,WAAWmD,cAAe,EAA9D,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UAAUxD,EAAMkB,UAElB,cAAC,IAAD,UACGlB,EAAMyD,KAAKzC,KAAI,SAACC,GAAD,OACd,cAAC,IAAD,CAAOyC,YAAaT,EAAShC,GAAI0C,EAAG,EAApC,SACG1C,YAMT,eAAC,IAAD,CAAKjC,UAAU,UAAU4E,GAAI,EAAGC,UAAU,SAA1C,UACG7D,EAAM8D,KADT,MACkB9D,EAAM+D,SAIxB,eAAC,IAAD,CAAM3D,QAAQ,SAAS4D,QAAS,EAAhC,UACGhE,EAAMiE,aACL,cAAC,EAAD,CACEP,YAAY,SACZQ,QAAQ,UACR/C,KAAMnB,EAAMiE,cAGfjE,EAAMmE,UACL,cAAC,EAAD,CACET,YAAY,SACZQ,QAAQ,UACR/C,KAAMnB,EAAMmE,cAOlB,cAAC,IAAD,CACEC,QAAS,CACPC,UAAW,CACTC,GAAI,CAAEC,UAAWxB,GACjByB,GAAI,CACFD,UAAWE,KAEbC,GAAI,CACFH,UAAWE,IACXzE,MAAO,CACLF,SAAU,QACV6E,GAAI,EACJf,GAAI,IAGRgB,GAAI,CACFL,UAAWE,IACXzE,MAAO,CACLF,SAAU,QAGdK,EAAG,CACDoE,UAAWM,KAEbC,EAAG,CACDP,UAAWQ,IACX/E,MAAO,CACLb,aAAc,IACdC,OAAQ,YACR4F,QAAS,MAGbC,MAAO,CACLV,UAAWU,KAEbC,KAAM,CACJX,UAAWW,IACXlF,MAAO,CACLsB,OAAQ,OACRlB,QAAS,SACTC,MAAO,SACP2E,QAAS,MAzCnB,SA+CGhF,EAAMmF,eCrDTC,EAA2B,CAC/BlE,MAAO,gBACP6C,MACE,0EACFoB,SAhEY,gtGAiEZrB,KAAM,OACNL,KAAM,CAAC,KAAM,WAAY,MAAO,MAChCQ,YAAa,8CACbE,SAAU,+CAGCkB,EAAa,WACxB,OAAO,cAAC,EAAD,eAAaD,KC1BhBE,EAA0B,CAC9BpE,MAAO,qBACPiE,SAhDY,svDAiDZpB,MACE,4GACFD,KAAM,OACNL,KAAM,CAAC,KAAM,QAAS,UACtBQ,YAAa,GACbE,SAAU,IAGCoB,EAAQ,WACnB,OAAO,cAAC,EAAD,eAAaD,KCvChBE,EAA4B,CAChCtE,MAAO,QACPiE,SArBY,4kBAsBZpB,MAAO,oEACPD,KAAM,OACNL,KAAM,CAAC,WAAY,MAAO,MAC1BU,SAAU,sCACVF,YAAa,uCAGFwB,EAAQ,WACnB,OAAO,cAAC,EAAD,eAAaD,KC9BhBE,EAA0B,CAC9BxE,MAAO,8BACPiE,SAAU,GACVpB,MACE,+NACFD,KAAM,OACNL,KAAM,CAAC,mBAAoB,SAAU,OACrCU,SAAU,uCAGCwB,EAAM,WACjB,OAAO,cAAC,EAAD,eAAaD,KCRhBE,EAA0B,CAC9B1E,MAAO,YACPiE,SALY,KAMZpB,MACE,kMACFD,KAAM,OACNL,KAAM,CAAC,QAGIoC,EAAY,WACvB,OAAO,cAAC,EAAD,eAAaD,KCVhBE,EAA2B,CAC/B5E,MAAO,SACPiE,SALY,KAMZpB,MAAO,wDACPD,KAAM,OACNL,KAAM,CAAC,KAAM,YACbU,SAAU,uCACVF,YAAa,uCAGF8B,EAAO,WAClB,OAAO,cAAC,EAAD,eAAaD,K,kBCyGPE,GAvHDC,YAAY,CACxB9C,OAAQ,CACN+C,KAAM,CACJ,GAAM,UACN,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,WAETC,IAAK,CACH,GAAM,UACN,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,WAETC,KAAM,CACJ,GAAM,UACN,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,WAETC,KAAM,CACJ,GAAM,UACN,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,WAETC,OAAQ,CACN,GAAM,UACN,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,WAETC,MAAO,CACL,GAAM,UACN,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,WAETC,OAAQ,CACN,GAAM,UACN,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,YAGXC,OAAQ,CACNC,OAAQ,SAAC1G,GAAD,MAAY,CAClB2G,KAAM,CACJC,MAAOC,aAAK,WAAY,UAAjBA,CAA4B7G,GACnC8G,GAAID,aAAK,UAAW,WAAhBA,CAA4B7G,IAElC,YAAa,CACX+G,UAAWF,aACT,0BACA,wBAFSA,CAGT7G,IAEJ,WAAY,CACV4G,MAAOC,aAAK,WAAY,UAAjBA,CAA4B7G,IAErC,qBAAsB,CACpB8G,GAAID,aAAK,UAAW,WAAhBA,CAA4B7G,IAElC,WAAY,CACV4G,MAAOC,aAAK,WAAY,WAAjBA,CAA6B7G,IAEtC,aAAc,CACZgH,WAAY,QAEdC,OAAQ,CACND,WAAY,OACZD,UAAW,wBCpHJ,OAA0B,iCCA1B,OAA0B,iCC0B1BG,GApBI,SAAC,GAAuB,IAArBxG,EAAoB,EAApBA,SACZ9B,EAAcf,cAAde,UAEFC,EAAQ,CACZsI,gBAAiB,cAAc,UAAdvI,EAA+BwI,GAAiBC,GAAhD,KACjBC,gBAA+B,UAAd1I,EAAwB,UAAY,UAErD2I,iBAAkB,SAClBC,qBAAsB,QACtBtI,SAAU,SACVuI,eAAgB,QAGlB,OACE,qBAAKzI,UAAU,eAAeH,MAAOA,EAArC,SACG6B,KCHMgH,GAAM,WAAO,IAChBzJ,EAAaT,IAAbS,SACFC,EAAcC,wBAAcF,EAAU,CAC1CG,IAAKH,EAASI,SACdC,KAAM,CACJC,QAAS,EACTC,UACwB,MAAtBP,EAASI,SACL,sBACA,uBAERI,MAAO,CAAEF,QAAS,EAAGC,UAAW,uBAChCE,OAAQ,CACNC,QAAS,OAIb,OACE,cAAC,IAAD,CAAgBqH,MAAOA,GAAvB,SACE,cAAC,GAAD,UACE,cAAC,EAAD,UACG9H,GAAY,SAACW,EAAOC,GACnB,OACE,cAAC,WAASC,IAAV,CAA6BF,MAAOA,EAApC,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO8I,OAAK,EAACC,KAAK,IAAIrD,UAAW5B,IACjC,cAAC,IAAD,CACEgF,OAAK,EACLC,KAAK,cACLrD,UAAWc,IAEb,cAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,SAASrD,UAAWgB,IACtC,cAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,SAASrD,UAAWkB,IACtC,cAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,SAASrD,UAAWoB,IACtC,cAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,QAAQrD,UAAWwB,IACrC,cAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,aAAarD,UAAWsB,QAZ3B/G,EAAKV,eC3BvByJ,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGMQ,QACW,cAA7BC,OAAOtK,SAASuK,UAEe,UAA7BD,OAAOtK,SAASuK,UAEhBD,OAAOtK,SAASuK,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,aAAD,UACE,eAAC,IAAD,CAAYC,SAAU,IAAtB,UACE,cAAC,IAAD,IACA,cAAC,GAAD,SAGJC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAACkB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YCpH5B1B,O","file":"static/js/main.16a8c510.chunk.js","sourcesContent":["import { useContext } from \"react\";\nimport { __RouterContext } from \"react-router\";\n\nconst useRouter = () => {\n  return useContext(__RouterContext);\n};\n\nexport default useRouter;\n","import React from \"react\";\nimport { useColorMode } from \"@chakra-ui/react\";\nimport { IoMdMoon } from \"react-icons/io\";\n\nconst ColorModeButton: React.FC = () => {\n  const { toggleColorMode } = useColorMode();\n\n  return <IoMdMoon size=\"2em\" onClick={() => toggleColorMode()} />;\n};\n\nexport default ColorModeButton;\n","import React from \"react\";\nimport { LinkOverlay, LinkBox, useColorMode } from \"@chakra-ui/react\";\nimport { animated, useTransition } from \"@react-spring/web\";\nimport useRouter from \"../useRouter\";\n\nconst Logo = () => {\n  const { location } = useRouter();\n  const transitions = useTransition(location, {\n    key: location.pathname,\n    from: {\n      opacity: location.pathname === \"/\" ? -1 : 1,\n      transform:\n        location.pathname === \"/\" ? \"rotate(-90deg)\" : \"rotate(105deg)\",\n    },\n    enter: {\n      opacity: 1,\n      transform: \"rotate(105deg)\",\n    },\n    config: { tension: 120 },\n  });\n  const { colorMode } = useColorMode();\n\n  return transitions((style, item) => {\n    return (\n      <animated.div className=\"no-select\" key={item.key} style={style}>\n        <LinkBox\n          height={[24, 24, 24, 36]}\n          overflow=\"hidden\"\n          borderRadius=\"50%\"\n          border=\"1px solid\"\n        >\n          <LinkOverlay href=\"/\"></LinkOverlay>\n          <svg\n            height=\"100%\"\n            viewBox=\"0 0 500 500\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill={colorMode === \"light\" ? \"black\" : \"white\"}\n          >\n            <defs>\n              <path\n                id=\"textCurve\"\n                d=\"M243.2, 382.4c-74.8,   \n                0-135.5-60.7-135.5-135.5s60.7-135.5,135.5-135.5s135.5, 60.7, 135.5,\n                135.5 S318, 382.4, 243.2, 382.4z\"\n              />\n              <linearGradient id=\"GradientV\">\n                <stop offset=\"0\" stopColor=\"#36a126\" />\n                <stop offset=\"1\" stopColor=\"#fc466b\" />\n              </linearGradient>\n              <linearGradient id=\"GradientH\" gradientTransform=\"rotate(90)\">\n                <stop offset=\"0\" stopColor=\"#090979\" />\n                <stop offset=\"1\" stopColor=\"#fcb045\" />\n              </linearGradient>\n            </defs>\n\n            {/* <mask id=\"Mask\"> */}\n            <text fontSize=\"104px\">\n              <textPath fill=\"current\" href=\"#textCurve\">\n                Brendan P Miller ***\n              </textPath>\n            </text>\n            {/* </mask>\n            <rect\n              x=\"0\"\n              y=\"0\"\n              width=\"500\"\n              height=\"500\"\n              fill=\"white\"\n              mask=\"url(#Mask)\"\n            ></rect> */}\n          </svg>\n        </LinkBox>\n      </animated.div>\n    );\n  });\n};\n\nexport { Logo };\n","import { Box, Flex, LinkBox, LinkOverlay } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { IoLogoGithub } from \"react-icons/io\";\nimport ColorModeButton from \"./ColorModeButton\";\nimport { Logo } from \"./Logo\";\n\ninterface LayoutProps {\n  children: JSX.Element;\n}\n\nexport const Layout: React.FC<LayoutProps> = (props) => {\n  return (\n    <Flex\n      width=\"100%\"\n      height=\"100vh\"\n      flexDirection={[\"column\", \"column\", \"column\", \"row\", \"row\"]}\n      p={4}\n    >\n      <Flex\n        flexDirection=\"row\"\n        justify=\"center\"\n        align=\"flex-start\"\n        height={[32, 32, 32, \"100%\"]}\n        w={[\"100%\", \"100%\", \"100%\", 48]}\n        flexShrink={0}\n        className=\"sidebar\"\n        paddingTop={[0, 0, 0, 4]}\n        paddingBottom={4}\n      >\n        <Flex\n          flexDirection={[\"row\", \"row\", \"row\", \"column\", \"column\"]}\n          align=\"center\"\n        >\n          <Box p={4} overflow=\"hidden\">\n            <Logo />\n          </Box>\n          <LinkBox p={4}>\n            <LinkOverlay href=\"https://github.com/bpatmiller\"></LinkOverlay>\n            <IoLogoGithub size=\"2em\" />\n          </LinkBox>\n          <Box p={4}>\n            <ColorModeButton />\n          </Box>\n        </Flex>\n      </Flex>\n\n      <Flex\n        p={0}\n        height=\"100%\"\n        overflow=\"hide\"\n        justify={[\"center\", \"center\", \"center\", \"flex-start\", \"flex-start\"]}\n      >\n        {props.children}\n      </Flex>\n    </Flex>\n  );\n};\n","import { Flex, Image, Box, Text, LinkBox, LinkOverlay } from \"@chakra-ui/react\";\nimport { useSpring, animated } from \"react-spring\";\nimport React, { useState } from \"react\";\n\nconst AnimatedBox = animated(Box);\n\ninterface ContentGridProps {\n  contents: ContentGridItemProps[];\n}\n\ninterface ContentGridItemProps {\n  title: string;\n  link: string;\n  img: string;\n}\n\nconst ContentGrid = (props: ContentGridProps) => {\n  const children = props.contents.map((x) => (\n    <ContentGridItem title={x.title} link={x.link} img={x.img} />\n  ));\n  return (\n    <Flex w=\"100%\" h=\"100%\">\n      <Flex\n        margin=\"auto\"\n        wrap=\"wrap\"\n        justify=\"space-around\"\n        align=\"center\"\n        maxWidth=\"1400px\"\n        p={4}\n        gridRowGap={[12, 12, 12, 8]}\n      >\n        {children}\n      </Flex>\n    </Flex>\n  );\n};\n\nconst ContentGridItem = (props: ContentGridItemProps) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const imgProps = useSpring({\n    transform: isHovered ? \"translate(-10px,-10px)\" : \"translate(0px,0px)\",\n    filter: isHovered ? \"saturate(150%)\" : \"saturate(50%)\",\n  });\n\n  const desktopBoxWidth = \"calc(100% * (1/3) - 64px - 1px)\";\n  const tabletBoxWidth = \"calc(100% * (1/2) - 64px - 1px)\";\n  const mobileBoxWidth = \"calc(100% * (1) - 64px - 1px)\";\n\n  return (\n    <AnimatedBox\n      className=\"shadowed\"\n      style={imgProps}\n      overflow=\"hidden\"\n      borderRadius=\"lg\"\n      w={[\n        mobileBoxWidth,\n        mobileBoxWidth,\n        tabletBoxWidth,\n        desktopBoxWidth,\n        desktopBoxWidth,\n      ]}\n    >\n      <LinkBox\n        className=\"caption-container\"\n        h=\"100%\"\n        w=\"100%\"\n        rounded=\"md\"\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n      >\n        <LinkOverlay href={\"/#\".concat(props.link)}>\n          <Image fit=\"cover\" w=\"100%\" src={props.img}></Image>\n\n          <Flex w=\"100%\" p={1} justify=\"center\" align=\"center\">\n            <Text noOfLines={1} className=\"caption\" fontSize=\"2xl\">\n              {props.title}\n            </Text>\n          </Flex>\n        </LinkOverlay>\n      </LinkBox>\n    </AnimatedBox>\n  );\n};\n\nexport { ContentGrid, ContentGridItem };\n","import * as React from \"react\";\n\nimport { ContentGrid } from \"../components/ContentGrid\";\n\nconst entries = [\n  { title: \"Fractalize.JS\", link: \"fractalize\", img: \"/frac.png\" },\n  { title: \"Audio Reactive GAN\", link: \"argan\", img: \"/gan.png\" },\n  { title: \"Chessboard\", link: \"chess\", img: \"/chess.png\" },\n  { title: \"Multiple Interacting Fluids\", link: \"gfm2d\", img: \"/gfm2d.png\" },\n  { title: \"Raytracer\", link: \"raytracer\", img: \"/raytracer.png\" },\n  { title: \"BulbGL\", link: \"bulb\", img: \"/bulb.png\" },\n];\n\nexport const Home = () => {\n  return <ContentGrid contents={entries} />;\n};\n","import { Button, LinkBox, LinkOverlay, ButtonProps } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { JsxElement } from \"typescript\";\nimport { IoMdGitNetwork, IoMdGlobe } from \"react-icons/io\";\ninterface ContentLinkProps {\n  children: JsxElement | JsxElement[];\n  buttonProps: ButtonProps;\n  link: string;\n}\n\nconst CodeLink = (props: ContentLinkProps) => {\n  return (\n    <LinkBox>\n      <LinkOverlay href={props.link}>\n        <Button leftIcon={<IoMdGitNetwork />} {...props}>\n          See the code\n        </Button>\n      </LinkOverlay>\n    </LinkBox>\n  );\n};\n\nconst ContentLink = (props: ContentLinkProps) => {\n  return (\n    <LinkBox>\n      <LinkOverlay href={props.link}>\n        <Button leftIcon={<IoMdGlobe />} {...props}>\n          See the demo\n        </Button>\n      </LinkOverlay>\n    </LinkBox>\n  );\n};\n\nexport { ContentLink, CodeLink };\n","import { Flex, Heading, Box, Text, Badge, Image, Link } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport Markdown from \"markdown-to-jsx\";\nimport { ContentLink, CodeLink } from \"./ContentLink\";\n\ninterface WriteupProps {\n  title: string;\n  markdown: string;\n  short: string;\n  date: string;\n  tags: string[];\n  contentLink: string;\n  codeLink: string;\n}\n\nconst HBar = () => {\n  return (\n    <Box margin=\"auto\" textAlign=\"center\">\n      · · ·\n    </Box>\n  );\n};\n\nconst genColor = (tagName: string) => {\n  const colors = [\"cyan\", \"pink\", \"green\", \"orange\", \"red\", \"purple\"];\n  const hash = tagName.charCodeAt(0) % colors.length;\n  return colors[hash];\n};\n\nconst Writeup = (props: WriteupProps) => {\n  return (\n    <Flex margin=\"auto\" maxWidth={800} p={8} direction=\"column\" align=\"basline\">\n      <Flex justify=\"space-between\" align=\"baseline\" gridColumnGap={8}>\n        <Box>\n          <Heading>{props.title}</Heading>\n        </Box>\n        <Box>\n          {props.tags.map((x: string) => (\n            <Badge colorScheme={genColor(x)} m={1}>\n              {x}\n            </Badge>\n          ))}\n        </Box>\n      </Flex>\n\n      <Box className=\"subhead\" mb={4} fontStyle=\"italic\">\n        {props.date} - {props.short}\n      </Box>\n\n      {/* links */}\n      <Flex justify=\"center\" gridGap={4}>\n        {props.contentLink && (\n          <ContentLink\n            colorScheme=\"orange\"\n            variant=\"outline\"\n            link={props.contentLink}\n          />\n        )}\n        {props.codeLink && (\n          <CodeLink\n            colorScheme=\"purple\"\n            variant=\"outline\"\n            link={props.codeLink}\n          />\n        )}\n      </Flex>\n\n      {/* markdown body */}\n\n      <Markdown\n        options={{\n          overrides: {\n            hr: { component: HBar },\n            h1: {\n              component: Heading,\n            },\n            h2: {\n              component: Heading,\n              props: {\n                fontSize: \"1.5em\",\n                mt: 4,\n                mb: 2,\n              },\n            },\n            h3: {\n              component: Heading,\n              props: {\n                fontSize: \"1em\",\n              },\n            },\n            p: {\n              component: Text,\n            },\n            a: {\n              component: Link,\n              props: {\n                borderRadius: \"4\",\n                border: \"1px solid\",\n                padding: \"1\",\n              },\n            },\n            Image: {\n              component: Image,\n            },\n            Flex: {\n              component: Flex,\n              props: {\n                margin: \"auto\",\n                justify: \"center\",\n                align: \"center\",\n                padding: 4,\n              },\n            },\n          },\n        }}\n      >\n        {props.markdown}\n      </Markdown>\n    </Flex>\n  );\n};\n\nexport type { WriteupProps };\nexport { Writeup };\n","import React from \"react\";\nimport { Writeup, WriteupProps } from \"../components/Writeup\";\n\nconst markdown = `\n\n## Animation\n<Flex>\n<iframe width='720' height='540' src='https://www.youtube.com/embed/jaG-7IOh0d0'/>\n</Flex>\n\n## Motivation\n\nThe aim of the project was to produce dynamic art from ordinary images.\nThe project makes use of a technique to approximate a closed curve on the complex plane with a Julia set from Fekete polynomials. Read more about it [here](https://arxiv.org/abs/1607.05055).\n\n## Using the software\n\n- Drag an image from your computer onto the page to \\`fractalize\\` it\n- Click and drag on fractal display to pan the view\n- Hover over the fractal output to animate it\n- Scroll to zoom in and out\n- Press \\`s\\` to hide/show the source image\n- Press \\`SPACEBAR\\` to disable/enable animation\n\n## Image Processing Pipeline\n\nSource images are segmented using pretrained [DeepLab](https://github.com/tensorflow/tfjs-models/blob/master/deeplab/README.md) tensorflow.js models. The user can select which segmentation model to use.\nThe segmented image is broken up into connected subsets, to satisfy that each subset is a [closed jordan curve](https://en.wikipedia.org/wiki/Jordan_curve_theorem). Parallel to this, the source image color pallete is extracted for coloring the generated fractals.\n\n---\n\nFor each connected subset, we find \\`n\\` Leja points of that set.\nIn this context, a Leja point can be thought of \"the most efficient bounding point\", so a set of Leja points provides an efficient description of a curve's boundary.\nThese Leja points are required to find the Fekete Polynomial of that shape, which will be used by the WebGL shaders to generate fractals.\n\n---\n\nThe fragment shader iterates each fragment as a complex point through the generated Fekete polynomial, and shades based on the resulting iterations to divergence and total distance travelled by the point.\nThis is the \"standard method\" of generating iterative fractals using graphics shaders. After shading has been applied, each fractal is colored with a color from the pallete generated earlier.\nThe many layers of colored fractals are then composed together to render the final result.\n\n## Limitations and further work\n\nSegmentation is a clear limiting factor in this pipeline. The DeepLab models provide reasonable and visually pleasing results with a broad range of real images, but struggles with synthetic images and images that are overly complex.\n\n---\n\nManaging the overlap of fractals is a current limitation that can be overcome. At this point, some results are \"muddy\" and detailed parts of the generated image are obscured by what should be background components. I plan on implimenting some sort of z-sorting determined by the amount of overlap each fractal has with the convex hull of each other fractal.\n\n---\n\nI have had some version of this project on the backburner for many years, and still have yet to achieve \"animating the fractals while preserving their general shape in a visually compelling way\". This is also a candidate for future work.\n\n## More technical details\n\nThis project was built using Typescript. Three.js is used for WebGL bindings. Tensorflow.js is used for image segmentation.\n\nSnowpack and webpack are used for development and bundling.\n\nThis project is currently deployed through Github Pages.\n\n`;\n\nconst frac_props: WriteupProps = {\n  title: \"Fractalize.JS\",\n  short:\n    \"A tool for generating complex images composed of Julia Sets, in browser\",\n  markdown: markdown,\n  date: \"2021\",\n  tags: [\"ML\", \"Fractals\", \"Web\", \"JS\"],\n  contentLink: \"https://bpatmiller.github.io/fractalize.js/\",\n  codeLink: \"https://github.com/bpatmiller/fractalize.js\",\n};\n\nexport const Fractalize = () => {\n  return <Writeup {...frac_props}></Writeup>;\n};\n","import React from \"react\";\nimport { Writeup, WriteupProps } from \"../components/Writeup\";\n\nconst markdown = `\n## Background\n\nThe project consists of two components - Stylegan2 for image generation, and an audio analyzer.\nThe audio analyzer does the following:\n\n---\n\n- Finds 'onsets' for low, middle, and high frequencies. Onsets are the sudden increase of magnitude in some frequency space.\n- Splits a song into sections using Laplacian Segmentation.\n- Finds the 'chromatic weights' - in other words the distribution of notes in a scale at any point in time.\n- Determines the most relevant sections of the track when cropping an audio file.\n\n---\n\nUsing this information, we can manipulate the latent vectors that we input to Stylegan2 in order to get synchronized animation.\nIn addition to this, manual/hack-y modifications are performed to tailor the results to the input audio (such as the scrolling transformation in animation #03).\n\n\n## 01 - Bladee over anime girls\n\nThis video was generated using audio from 'I Think...' by Bladee and the anime portraits model from [this page](https://github.com/justinpinkney/awesome-pretrained-stylegan2#Anime-portraits)\n\n\n<Flex>\n<iframe width='720' height='540' src='https://www.youtube.com/embed/hST8RRi3QC0'/>\n</Flex>\n\n## 02 - Rev8716 over mountains\n\nThis video was generated using audio from 'Rev8617' by Skee Mask and a custom model trained on a dataset of ~1200 images of mountains and volcanos.\n\n<Flex>\n<iframe width='720' height='540' src='https://www.youtube.com/embed/fQQU_nPG7XU'/>\n</Flex>\n\n## 03 - Outro over drawings\n\nThis video was generated using original audio and the figure drawings model from [this page](https://github.com/justinpinkney/awesome-pretrained-stylegan2#figure-drawings)\n\n<Flex>\n<iframe width='720' height='540' src='https://www.youtube.com/embed/2g2oluaKL5A'/>\n</Flex>\n\n`;\n\nconst gan_props: WriteupProps = {\n  title: \"Audio Reactive GAN\",\n  markdown: markdown,\n  short:\n    \"A series of audio/visual pieces generated using NVIDIA's stylegan2 and a custom built music analysis tool\",\n  date: \"2021\",\n  tags: [\"ML\", \"Audio\", \"Python\"],\n  contentLink: \"\",\n  codeLink: \"\",\n};\n\nexport const Argan = () => {\n  return <Writeup {...gan_props}></Writeup>;\n};\n","import React from \"react\";\nimport { Writeup, WriteupProps } from \"../components/Writeup\";\n\nconst markdown = `\n## Motivation\n\nI have become obsessed with chess for the last several months.\nIn the official React docs, there is an example project of tic-tac-toe.\nI thought it was a logical step to synthesize these two ideas and learn React while indulging in my obsession.\n\n## Further work\n\nBefore any exciting features can be added, I must implement castling and disable moving when inspecting a previous position.\n\n---\n\nAfter that... I plan on splitting the project into a separate backend and frontend.\n\nThe next step after that is to begin working on networked multiplayer.\n\n`;\n\nconst chess_props: WriteupProps = {\n  title: \"Chess\",\n  markdown: markdown,\n  short: \"A simple chessboard with hand-drawn pieces and eclectic art style\",\n  date: \"2021\",\n  tags: [\"Frontend\", \"Web\", \"JS\"],\n  codeLink: \"https://github.com/bpatmiller/chess\",\n  contentLink: \"https://bpatmiller.github.io/chess/\",\n};\n\nexport const Chess = () => {\n  return <Writeup {...chess_props}></Writeup>;\n};\n","import React from \"react\";\nimport { Writeup, WriteupProps } from \"../components/Writeup\";\n\nconst gfm_props: WriteupProps = {\n  title: \"Multiple Interacting Fluids\",\n  markdown: \"\",\n  short:\n    \"Simulation of multiple interacting fluids (with varying density, chemical reactions, and fluid boundary projection) in 2-dimensions. Part of a semester long undergraduate reading and research course on fluid simulation .\",\n  date: \"2019\",\n  tags: [\"Fluid Simulation\", \"Python\", \"C++\"],\n  codeLink: \"https://github.com/bpatmiller/gfm2d\",\n};\n\nexport const Gfm = () => {\n  return <Writeup {...gfm_props}></Writeup>;\n};\n","import React from \"react\";\nimport { Writeup, WriteupProps } from \"../components/Writeup\";\n\nconst markdown = `\n`;\n\nconst ray_props: WriteupProps = {\n  title: \"Raytracer\",\n  markdown: markdown,\n  short:\n    \"Parallelized raytracer written in C++ with Bounded Volume Heirarchy acceleration, depth of field, cube and texture mapping, and adaptive supersampling. Coursework for computer graphics class.\",\n  date: \"2019\",\n  tags: [\"C++\"],\n};\n\nexport const Raytracer = () => {\n  return <Writeup {...ray_props}></Writeup>;\n};\n","import React from \"react\";\nimport { Writeup, WriteupProps } from \"../components/Writeup\";\n\nconst markdown = `\n`;\n\nconst bulb_props: WriteupProps = {\n  title: \"BulbGL\",\n  markdown: markdown,\n  short: \"Interactive Mandelbulb viewer, accelerated with WebGL\",\n  date: \"2018\",\n  tags: [\"JS\", \"Fractals\"],\n  codeLink: \"https://github.com/bpatmiller/bulbGL\",\n  contentLink: \"https://bpatmiller.github.io/bulbGL\",\n};\n\nexport const Bulb = () => {\n  return <Writeup {...bulb_props}></Writeup>;\n};\n","import { extendTheme } from \"@chakra-ui/react\";\nimport { mode } from \"@chakra-ui/theme-tools\";\n\nconst theme = extendTheme({\n  colors: {\n    pink: {\n      \"50\": \"#F7EEEF\",\n      \"100\": \"#E8CED2\",\n      \"200\": \"#DAAFB6\",\n      \"300\": \"#CB8F99\",\n      \"400\": \"#BD707C\",\n      \"500\": \"#AE5160\",\n      \"600\": \"#8C404D\",\n      \"700\": \"#693039\",\n      \"800\": \"#462026\",\n      \"900\": \"#231013\",\n    },\n    red: {\n      \"50\": \"#FAECEA\",\n      \"100\": \"#F1CAC5\",\n      \"200\": \"#E8A9A0\",\n      \"300\": \"#E0877B\",\n      \"400\": \"#D76556\",\n      \"500\": \"#CE4331\",\n      \"600\": \"#A53627\",\n      \"700\": \"#7C281D\",\n      \"800\": \"#521B14\",\n      \"900\": \"#290D0A\",\n    },\n    teal: {\n      \"50\": \"#ECF9F7\",\n      \"100\": \"#C9EEE9\",\n      \"200\": \"#A6E2DA\",\n      \"300\": \"#84D7CC\",\n      \"400\": \"#61CCBD\",\n      \"500\": \"#3EC1AF\",\n      \"600\": \"#329A8C\",\n      \"700\": \"#257469\",\n      \"800\": \"#194D46\",\n      \"900\": \"#0C2723\",\n    },\n    cyan: {\n      \"50\": \"#E8F4FC\",\n      \"100\": \"#BFE1F7\",\n      \"200\": \"#97CEF2\",\n      \"300\": \"#6EBBED\",\n      \"400\": \"#45A8E8\",\n      \"500\": \"#1C94E3\",\n      \"600\": \"#1677B6\",\n      \"700\": \"#115988\",\n      \"800\": \"#0B3B5B\",\n      \"900\": \"#061E2D\",\n    },\n    purple: {\n      \"50\": \"#F0EDF7\",\n      \"100\": \"#D6CDE9\",\n      \"200\": \"#BCADDC\",\n      \"300\": \"#A28DCE\",\n      \"400\": \"#876DC0\",\n      \"500\": \"#6D4DB2\",\n      \"600\": \"#573E8E\",\n      \"700\": \"#412E6B\",\n      \"800\": \"#2C1F47\",\n      \"900\": \"#160F24\",\n    },\n    green: {\n      \"50\": \"#EDF8EF\",\n      \"100\": \"#CCEBD3\",\n      \"200\": \"#ABDEB7\",\n      \"300\": \"#8AD19B\",\n      \"400\": \"#69C47F\",\n      \"500\": \"#48B763\",\n      \"600\": \"#3A9250\",\n      \"700\": \"#2B6E3C\",\n      \"800\": \"#1D4928\",\n      \"900\": \"#0E2514\",\n    },\n    orange: {\n      \"50\": \"#FCF0E9\",\n      \"100\": \"#F6D4C1\",\n      \"200\": \"#F0B999\",\n      \"300\": \"#EA9E70\",\n      \"400\": \"#E58248\",\n      \"500\": \"#DF6720\",\n      \"600\": \"#B2521A\",\n      \"700\": \"#863E13\",\n      \"800\": \"#59290D\",\n      \"900\": \"#2D1506\",\n    },\n  },\n  styles: {\n    global: (props) => ({\n      body: {\n        color: mode(\"gray.900\", \"gray.50\")(props),\n        bg: mode(\"gray.50\", \"gray.900\")(props),\n      },\n      \".shadowed\": {\n        boxShadow: mode(\n          \"6px 6px 8px 2px #A0AEC0\",\n          \"6px 6px 8px 2px black\"\n        )(props),\n      },\n      \".caption\": {\n        color: mode(\"gray.900\", \"gray.50\")(props),\n      },\n      \".caption-container\": {\n        bg: mode(\"gray.50\", \"gray.700\")(props),\n      },\n      \".subhead\": {\n        color: mode(\"gray.700\", \"gray.200\")(props),\n      },\n      \".no-select\": {\n        userSelect: \"none\",\n      },\n      Button: {\n        userSelect: \"none\",\n        boxShadow: \"none !important\",\n      },\n    }),\n  },\n});\n\nexport default theme;\n","export default __webpack_public_path__ + \"static/media/ltbg.56aa18f5.svg\";","export default __webpack_public_path__ + \"static/media/dkbg.71d4cbf1.svg\";","import { useColorMode } from \"@chakra-ui/color-mode\";\nimport React from \"react\";\n\nimport ltbg from \"../ltbg.svg\";\nimport dkbg from \"../dkbg.svg\";\n\nconst Background = ({ children }: any) => {\n  const { colorMode } = useColorMode();\n\n  const style = {\n    backgroundImage: colorMode === \"light\" ? `url(${ltbg})` : `url(${dkbg})`,\n    backgroundColor: colorMode === \"light\" ? \"#F7FAFC\" : \"#171923\",\n\n    backgroundRepeat: \"repeat\",\n    backgroundAttachment: \"fixed\",\n    overflow: \"scroll\",\n    backgroundSize: \"auto\",\n  };\n\n  return (\n    <div className=\"bg-container\" style={style}>\n      {children}\n    </div>\n  );\n};\n\nexport default Background;\n","import * as React from \"react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport useRouter from \"./useRouter\";\nimport { useTransition, animated } from \"react-spring\";\n\nimport { Layout } from \"./components/Layout\";\nimport { Home } from \"./pages/Home\";\nimport { Fractalize } from \"./pages/Fractalize\";\nimport { Argan } from \"./pages/Argan\";\nimport { Chess } from \"./pages/Chess\";\nimport { Gfm } from \"./pages/Gfm\";\nimport { Raytracer } from \"./pages/Raytracer\";\nimport { Bulb } from \"./pages/Bulb\";\n\nimport theme from \"./theme\";\nimport Background from \"./components/Background\";\n\nexport const App = () => {\n  const { location } = useRouter();\n  const transitions = useTransition(location, {\n    key: location.pathname,\n    from: {\n      opacity: 0,\n      transform:\n        location.pathname === \"/\"\n          ? \"translate(0px,-35%)\"\n          : \"translate(0px,100%)\",\n    },\n    enter: { opacity: 1, transform: \"translate(0px, 0px)\" },\n    config: {\n      tension: 120,\n    },\n  });\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Background>\n        <Layout>\n          {transitions((style, item) => {\n            return (\n              <animated.div key={item.key} style={style}>\n                <Switch>\n                  <Route exact path=\"/\" component={Home}></Route>\n                  <Route\n                    exact\n                    path=\"/fractalize\"\n                    component={Fractalize}\n                  ></Route>\n                  <Route exact path=\"/argan\" component={Argan}></Route>\n                  <Route exact path=\"/chess\" component={Chess}></Route>\n                  <Route exact path=\"/gfm2d\" component={Gfm}></Route>\n                  <Route exact path=\"/bulb\" component={Bulb}></Route>\n                  <Route exact path=\"/raytracer\" component={Raytracer}></Route>\n                </Switch>\n              </animated.div>\n            );\n          })}\n        </Layout>\n      </Background>\n    </ChakraProvider>\n  );\n};\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename={\"/\"}>\n      <ColorModeScript />\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}